
# SWMM, Dash and MLFlow
This repo aims to provide a basic starter template, minimum working examples and best practices for developing and testing Dash applications that leverage SWMM and MLFlow for hydroinformatics use cases.

-  Virtual environment management with `venv`
-  Automated code review with `Pylint` and `Black`
-  Functional tests with `Pytest`
-  Remote tests to support reproducibility (via GitHub Actions)
-  Automated project documentation rendering with Quarto

:::{.callout-note}
Many of the concepts implemented here are directly from the examples in the [PySWMM library](https://github.com/pyswmm/pyswmm).
:::

# Overview
This documentation is set up to provide active development of documentation along new coded features. This is achieved by following a simple development iteration loop:

1. Develop new features in a Jupyter notebook located in the `dev` directory. All development files should be kept local to the feature folder.
1. When ready to deploy a new feature, copy the contents of the feature folder to the repository root, including (minimally): `requirements.txt`, a `swmm_files` directory with relevant SWMM artifacts, `app.py` containing the code for the new Dash app, updated `README.md` explaining the particular features of the new app release.
1. A new app version will be automatically deployed to the Azure web app service *only* when changes to the above root-level files are made. That is, the CI/CD workflow for deployment to Azure is set to *ignore* pushes to the `docs` directory, and the `dev` directory is not committed to the repo (it is ignored in `.gitignore`).
1. Once the app version is deployed and validated as an Azure Web App, a new example sub-folder should be created to store the development files in the documentation (this is how the successive development iterations are tracked - see the [Examples Overview page](examples/overview.qmd) for details).

This style of development supports active iteration over simple examples to increasingly complex (and meaningful) applications.

# Documentation
The rest of this documentation is organized as follows:

## Design
The [design section](design/overview.qmd) of this documentation provides detailed notes on the overall design considerations.

## Implement
The [implementation section](implement/overview.qmd) provides notes on implementing the active design.

## Use
The [usage section](use/overview.qmd) provides notes on using the applications in practical contexts.

## Examples
The [examples section](examples/overview.qmd) documents the iterations over this application from MWE to more meaningful instances (as discussed above).